
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 27 16:38:05 CEST 2014
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue May 27 16:38:05 CEST 2014
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
    "\005\011\000\002\006\006\000\002\007\005\000\002\010" +
    "\004\000\002\011\004\000\002\012\004\000\002\013\005" +
    "\000\002\015\003\000\002\015\003\000\002\014\005\000" +
    "\002\014\003\000\002\017\003\000\002\017\003\000\002" +
    "\016\005\000\002\016\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\024\002\ufffe\005\014\007\013\013\026\015" +
    "\004\016\015\017\005\020\024\037\012\001\002\000\004" +
    "\037\102\001\002\000\004\037\uffee\001\002\000\004\004" +
    "\ufffc\001\002\000\004\004\100\001\002\000\004\004\ufff9" +
    "\001\002\000\004\004\ufff8\001\002\000\004\031\076\001" +
    "\002\000\014\027\031\034\032\035\036\036\034\037\033" +
    "\001\002\000\024\005\014\006\ufffe\007\013\013\026\015" +
    "\004\016\015\017\005\020\024\037\012\001\002\000\014" +
    "\027\031\034\032\035\036\036\034\037\033\001\002\000" +
    "\004\037\063\001\002\000\004\002\001\001\002\000\004" +
    "\002\062\001\002\000\004\004\ufffb\001\002\000\004\004" +
    "\ufffd\001\002\000\004\004\ufffa\001\002\000\004\037\uffed" +
    "\001\002\000\004\004\ufff7\001\002\000\024\005\014\007" +
    "\013\013\026\014\ufffe\015\004\016\015\017\005\020\024" +
    "\037\012\001\002\000\004\014\030\001\002\000\014\027" +
    "\031\034\032\035\036\036\034\037\033\001\002\000\014" +
    "\027\031\034\032\035\036\036\034\037\033\001\002\000" +
    "\030\004\uffdd\010\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\030\uffdd\032\uffdd\033\uffdd\001\002\000" +
    "\030\004\uffdc\010\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\030\uffdc\032\uffdc\033\uffdc\001\002\000" +
    "\030\004\uffdb\010\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\030\uffdb\032\uffdb\033\uffdb\001\002\000" +
    "\004\004\ufff4\001\002\000\030\004\uffda\010\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\032" +
    "\uffda\033\uffda\001\002\000\030\004\uffe7\010\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\053\026\054\030\uffe7\032" +
    "\uffe7\033\052\001\002\000\030\004\uffe2\010\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\001\002\000\022\004\uffeb\010\uffeb\021\046" +
    "\022\042\023\043\024\045\030\uffeb\032\050\001\002\000" +
    "\014\027\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\001\002" +
    "\000\014\027\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\001" +
    "\002\000\014\027\031\034\032\035\036\036\034\037\033" +
    "\001\002\000\014\027\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\001\002\000\014\027\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\001\002\000\014\027\031\034\032\035\036\036" +
    "\034\037\033\001\002\000\014\027\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\001\002\000\030\004\uffe8\010\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\053\026\054\030\uffe8" +
    "\032\uffe8\033\052\001\002\000\014\027\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\001\002\000\014\027\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\001\002\000\014\027\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\014\027\031" +
    "\034\032\035\036\036\034\037\033\001\002\000\030\004" +
    "\uffe3\010\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\032\uffe3\033\uffe3\001\002\000\016\004" +
    "\uffec\010\uffec\023\043\024\045\030\uffec\032\050\001\002" +
    "\000\004\030\061\001\002\000\030\004\uffde\010\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde" +
    "\032\uffde\033\uffde\001\002\000\004\002\000\001\002\000" +
    "\004\004\ufff0\001\002\000\004\004\ufff1\001\002\000\004" +
    "\006\066\001\002\000\004\004\uffef\001\002\000\004\010" +
    "\070\001\002\000\026\005\014\007\013\011\ufffe\012\ufffe" +
    "\013\026\015\004\016\015\017\005\020\024\037\012\001" +
    "\002\000\006\011\072\012\073\001\002\000\024\005\014" +
    "\007\013\012\ufffe\013\026\015\004\016\015\017\005\020" +
    "\024\037\012\001\002\000\004\004\ufff6\001\002\000\004" +
    "\012\075\001\002\000\004\004\ufff5\001\002\000\014\027" +
    "\031\034\032\035\036\036\034\037\033\001\002\000\004" +
    "\004\ufff3\001\002\000\034\002\ufffe\005\014\006\ufffe\007" +
    "\013\011\ufffe\012\ufffe\013\026\014\ufffe\015\004\016\015" +
    "\017\005\020\024\037\012\001\002\000\014\002\uffff\006" +
    "\uffff\011\uffff\012\uffff\014\uffff\001\002\000\004\004\ufff2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\030\002\017\003\016\004\006\005\021\006" +
    "\005\007\020\010\022\011\007\012\010\013\024\015\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\066\016\040\021\036\023" +
    "\037\001\001\000\026\003\064\004\006\005\021\006\005" +
    "\007\020\010\022\011\007\012\010\013\024\015\015\001" +
    "\001\000\012\014\063\016\040\021\036\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\026\004\006\005" +
    "\021\006\005\007\020\010\022\011\007\012\010\013\024" +
    "\015\015\001\001\000\002\001\001\000\012\014\034\016" +
    "\040\021\036\023\037\001\001\000\012\014\057\016\040" +
    "\021\036\023\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\054\001\001\000\002\001\001\000\006\017" +
    "\043\020\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\056\021\036\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\050\023\037\001\001" +
    "\000\002\001\001\000\004\022\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\055" +
    "\001\001\000\002\001\001\000\004\020\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\070\004\006\005\021" +
    "\006\005\007\020\010\022\011\007\012\010\013\024\015" +
    "\015\001\001\000\002\001\001\000\026\003\073\004\006" +
    "\005\021\006\005\007\020\010\022\011\007\012\010\013" +
    "\024\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\076\016\040\021\036\023" +
    "\037\001\001\000\002\001\001\000\026\003\100\004\006" +
    "\005\021\006\005\007\020\010\022\011\007\012\010\013" +
    "\024\015\015\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {

  public static Exp mkexp(String op, Exp e1, Exp e2) {
	switch(op) {
		case "=":   return new EQ(e1,e2); 
		case "<":   return new LESS(e1,e2); 
		case "+":   return new ADD(e1,e2); 
		case "-":   return new SUB(e1,e2);
		case "*":   return new MUL(e1,e2); 
		case "/":   return new DIV(e1,e2);
		case "or":  return new OR(e1,e2);
		case "and": return new AND(e1,e2);
		default : return null;
	}
    }

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Secuencia_S 
            {
              Programa RESULT =null;
		SecuenciaS n = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new Programa(n); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Secuencia_S ::= S SEMI Secuencia_S 
            {
              SecuenciaS RESULT =null;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		SecuenciaS s2 = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new SecuenciaSSec(s1,s2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Secuencia_S",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Secuencia_S ::= 
            {
              SecuenciaS RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Secuencia_S",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S_If 
            {
              Sentencia RESULT =null;
		SIf a = (SIf)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= S_Repeat 
            {
              Sentencia RESULT =null;
		SRepeat a = (SRepeat)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= S_Assign 
            {
              Sentencia RESULT =null;
		SAssign a = (SAssign)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= S_Read 
            {
              Sentencia RESULT =null;
		SRead a = (SRead)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= S_Write 
            {
              Sentencia RESULT =null;
		SWrite a = (SWrite)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= S_Declare 
            {
              Sentencia RESULT =null;
		SDeclare a = (SDeclare)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= S_Block 
            {
              Sentencia RESULT =null;
		SBloque a = (SBloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S_If ::= IF Exp THEN Secuencia_S END 
            {
              SIf RESULT =null;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		SecuenciaS s = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = new IfThen(b,s); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_If",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S_If ::= IF Exp THEN Secuencia_S ELSE Secuencia_S END 
            {
              SIf RESULT =null;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		SecuenciaS s1 = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		SecuenciaS s2 = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new IfElse(b,s1,s2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_If",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S_Repeat ::= REPEAT Secuencia_S UNTIL Exp 
            {
              SRepeat RESULT =null;
		SecuenciaS s = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SRepeat(b,s); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Repeat",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S_Assign ::= IDEN IGUAL Exp 
            {
              SAssign RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SAssign(new FactorId(x),e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Assign",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S_Read ::= READ IDEN 
            {
              SRead RESULT =null;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SRead(new FactorId(x)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Read",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S_Write ::= WRITE Exp 
            {
              SWrite RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SWrite(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Write",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S_Declare ::= Type IDEN 
            {
              SDeclare RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SDeclare(new FactorId(x),t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Declare",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S_Block ::= NEW_BLOCK Secuencia_S END_BLOCK 
            {
              SBloque RESULT =null;
		SecuenciaS s = (SecuenciaS)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new SBloque(s); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S_Block",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= INT 
            {
              String RESULT =null;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) vi; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= BOOL 
            {
              String RESULT =null;
		Object vb = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) vb; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Type",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp_simple Op_comp Exp_simple 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = mkexp(op,e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp_simple 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op_comp ::= MENOR 
            {
              String RESULT =null;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) le; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_comp",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op_comp ::= EQ 
            {
              String RESULT =null;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) eq; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_comp",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp_simple ::= Exp_simple Op_arit Term 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT =  mkexp(op,e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp_simple",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp_simple ::= Term 
            {
              Exp RESULT =null;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Exp_simple",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op_arit ::= MAS 
            {
              String RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_arit",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op_arit ::= MENOS 
            {
              String RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_arit",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op_arit ::= OR 
            {
              String RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_arit",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= Term Op_mul Factor 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT =  mkexp(op,e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Term ::= Factor 
            {
              Exp RESULT =null;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op_mul ::= PROD 
            {
              String RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) p; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_mul",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op_mul ::= DIV 
            {
              String RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_mul",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op_mul ::= AND 
            {
              String RESULT =null;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = (String) a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Op_mul",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factor ::= PAP Exp PCIERRE 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Factor",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Factor ::= NUMBER 
            {
              Exp RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FactorInt(Integer.parseInt(e)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Factor",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Factor ::= IDEN 
            {
              Exp RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FactorId(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Factor",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= TRUE 
            {
              Exp RESULT =null;
		String tt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FactorBool(Boolean.parseBoolean(tt)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Factor",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Factor ::= FALSE 
            {
              Exp RESULT =null;
		String ff = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new FactorBool(Boolean.parseBoolean(ff)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Factor",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

